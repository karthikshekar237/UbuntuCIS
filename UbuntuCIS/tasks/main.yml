---
- name: Gather mounted partitions
  ansible.builtin.command: mount
  register: mounted_partitions

- name: Set mount names
  ansible.builtin.set_fact:
    mount_names: "{{ mounted_partitions.stdout | regex_findall(' on (/[^ ]*) ') | flatten }}"

- name: "1.1.1.1 | PATCH | Ensure mounting of cramfs filesystems is disabled"
  block:
    - name: "1.1.1.1 | PATCH | Ensure mounting of cramfs filesystems is disabled | Edit modprobe config"
      ansible.builtin.lineinfile:
        dest: /etc/modprobe.d/cramfs.conf
        regexp: '^(#)?install cramfs(\\s|$)'
        line: install cramfs /bin/true
        create: true

    - name: "1.1.1.1 | PATCH | Ensure mounting of cramfs filesystems is disabled | blacklist"
      ansible.builtin.lineinfile:
        path: /etc/modprobe.d/blacklist.conf
        regexp: "^(#)?blacklist cramfs(\\s|$)"
        line: "blacklist cramfs"
        create: true
        mode: '0600'

    - name: "1.1.1.1 | PATCH | Ensure mounting of cramfs filesystems is disabled | Disable cramfs"
      community.general.modprobe:
        name: cramfs
        state: absent
      when: ansible_connection != 'docker'
  notify: Update_Initramfs
  when:
    - ubtu22cis_rule_1_1_1_1
  tags:
    - level1-server
    - level1-workstation
    - automated
    - patch
    - rule_1.1.1.1
    - cramfs

- name: "1.1.1.2 | PATCH | Ensure mounting of squashfs filesystems is disabled"
  block:
    - name: "Check if squashfs is built-in"
      ansible.builtin.shell: "modinfo squashfs"
      register: squashfs_check
      changed_when: false
      failed_when: false

    - name: "Set squashfs_builtin"
      ansible.builtin.set_fact:
        squashfs_builtin: "{{ 'builtin' in squashfs_check.stdout }}"

    - name: "1.1.1.2 | PATCH | Ensure mounting of squashfs filesystems is disabled | Edit modprobe config"
      ansible.builtin.lineinfile:
        dest: /etc/modprobe.d/squashfs.conf
        regexp: '^(#)?install squashfs(\\s|$)'
        line: install squashfs /bin/true
        create: true

    - name: "1.1.1.2 | PATCH | Ensure mounting of squashfs filesystems is disabled | blacklist"
      ansible.builtin.lineinfile:
        path: /etc/modprobe.d/blacklist.conf
        regexp: "^(#)?blacklist squashfs(\\s|$)"
        line: "blacklist squashfs"
        create: true
        mode: '0600'

    - name: "1.1.1.2 | PATCH | Ensure mounting of squashfs filesystems is disabled | Disable squashfs"
      community.general.modprobe:
        name: squashfs
        state: absent
      when: not squashfs_builtin

    - name: "1.1.1.2 | PATCH | Ensure mounting of squashfs filesystems is disabled | Blacklist built-in module"
      ansible.builtin.lineinfile:
        path: /etc/modprobe.d/blacklist.conf
        regexp: "^(#)?blacklist squashfs(\\s|$)"
        line: "blacklist squashfs"
        create: true
        mode: '0600'
      when: squashfs_builtin
  notify: Update_Initramfs
  when:
    - ubtu22cis_rule_1_1_1_2
    - snap_pkg_mgr.stdout == "0"
  tags:
    - level2-server
    - level2-workstation
    - automated
    - patch
    - rule_1.1.1.2
    - squashfs

- name: "1.1.1.3 | PATCH | Ensure mounting of udf filesystems is disabled"
  block:
    - name: "1.1.1.3 | PATCH | Ensure mounting of udf filesystems is disabled | Edit modprobe config"
      ansible.builtin.lineinfile:
        dest: /etc/modprobe.d/udf.conf
        regexp: '^(#)?install udf(\\s|$)'
        line: install udf /bin/true
        create: true

    - name: "1.1.1.3 | PATCH | Ensure mounting of udf filesystems is disabled | blacklist"
      ansible.builtin.lineinfile:
        path: /etc/modprobe.d/blacklist.conf
        regexp: "^(#)?blacklist udf(\\s|$)"
        line: "blacklist udf"
        create: true
        mode: '0600'

    - name: "1.1.1.3 | PATCH | Ensure mounting of udf filesystems is disabled | Disable udf"
      community.general.modprobe:
        name: udf
        state: absent
      when: ansible_connection != 'docker'
  notify: Update_Initramfs
  when:
    - ubtu22cis_rule_1_1_1_3
  tags:
    - level2-server
    - level2-workstation
    - automated
    - patch
    - rule_1.1.1.3
    - udf

- name: "1.1.2.1 | AUDIT | Ensure /tmp is a separate partition"
  block:
    - name: "1.1.2.1 | AUDIT | Ensure /tmp is a separate partition | Absent"
      ansible.builtin.debug:
        msg: "Warning!! {{ required_mount }} doesn't exist. This is a manual task"

    - name: "1.1.2.1 | WARN | Ensure /tmp is a separate partition | warn_count"
      ansible.builtin.import_tasks:
        file: warning_facts.yml
  vars:
    warn_control_id: '1.1.2.1'
    required_mount: '/tmp'
  when:
    - required_mount not in mount_names
    - ubtu22cis_rule_1_1_2_1
  tags:
    - level1-server
    - level1-workstation
    - audit
    - mounts
    - rule_1.1.2.1
    - tmp

- name: "1.1.2.2 | PATCH | Ensure nodev option set on /tmp partition"
  ansible.builtin.set_fact:
    tmp_partition_mount_options: "{{ tmp_partition_mount_options + [ 'nodev' ] }}"
  changed_when: true
  notify: Writing and remounting tmp
  vars:
    required_mount: '/tmp'
  when:
    - required_mount in mount_names
    - ubtu22cis_rule_1_1_2_2
  tags:
    - level1-server
    - level1-workstation
    - automated
    - patch
    - rule_1.1.2.2
    - tmp

- name: "1.1.2.3 | PATCH | Ensure noexec option set on /tmp partition"
  ansible.builtin.set_fact:
    tmp_partition_mount_options: "{{ tmp_partition_mount_options + [ 'noexec' ] }}"
  changed_when: true
  notify: Writing and remounting tmp
  vars:
    required_mount: '/tmp'
  when:
    - required_mount in mount_names
    - ubtu22cis_rule_1_1_2_3
  tags:
    - level1-server
    - level1-workstation
    - automated
    - patch
    - rule_1.1.2.3
    - tmp

- name: "1.1.2.4 | PATCH | Ensure nosuid option set on /tmp partition"
  ansible.builtin.set_fact:
    tmp_partition_mount_options: "{{ tmp_partition_mount_options + [ 'nosuid' ] }}"
  changed_when: true
  notify: Writing and remounting tmp
  vars:
    required_mount: '/tmp'
  when:
    - required_mount in mount_names
    - ubtu22cis_rule_1_1_2_4
  tags:
    - level1-server
    - level1-workstation
    - automated
    - patch
    - rule_1.1.2.4
    - tmp

- name: Writing and remounting tmp
  block:
    - name: Write /etc/fstab
      ansible.builtin.mount:
        path: "{{ required_mount }}"
        fstype: tmpfs
        opts: "{{ tmp_partition_mount_options | join(',') }}"
        state: present

    - name: Remount /tmp
      ansible.builtin.command: mount -o remount /tmp
  when: tmp_partition_mount_options is defined

- name: "1.1.3.1 | AUDIT | Ensure /var is a separate partition"
  block:
    - name: "1.1.3.1 | AUDIT | Ensure /var is a separate partition | Absent"
      ansible.builtin.debug:
        msg: "Warning!! {{ required_mount }} doesn't exist. This is a manual task"

    - name: "1.1.3.1 | WARN | Ensure /var is a separate partition | warn_count"
      ansible.builtin.import_tasks:
        file: warning_facts.yml
  vars:
    warn_control_id: '1.1.3.1'
    required_mount: '/var'
  when:
    - required_mount not in mount_names
    - ubtu22cis_rule_1_1_3_1
  tags:
    - level2-server
    - level2-workstation
    - automated
    - audit
    - rule_1.1.3.1
    - var

- name: |
    "1.1.3.2 | PATCH | Ensure /var partition includes the nodev option"
    "1.1.3.3 | PATCH | Ensure /var partition includes the nosuid option"
  ansible.posix.mount:
    path: /var
    src: "{{ item.device }}"
    state: present
    fstype: "{{ item.fstype }}"
    opts: defaults,{% if ubtu22cis_rule_1_1_3_2 %}nodev,{% endif %}{% if ubtu22cis_rule_1_1_3_3 %}nosuid{% endif %}
  notify: Remount var
  loop: "{{ ansible_facts.mounts }}"
  loop_control:
    label: "{{ item.device }}"
  when:
    - item.mount == "/var"
    - ubtu22cis_rule_1_1_3_2 or
      ubtu22cis_rule_1_1_3_3
  tags:
    - level1-server
    - level1-workstation
    - automated
    - patch
    - rule_1.1.3.2
    - rule_1.1.3.3
    - var

- name: "1.1.4.1 | AUDIT | Ensure /var/tmp is a separate partition"
  block:
    - name: "1.1.4.1 | AUDIT | Ensure /var/tmp is a separate partition | Absent"
      ansible.builtin.debug:
        msg: "Warning!! {{ required_mount }} doesn't exist. This is a manual task"

    - name: "1.1.4.1 | WARN | Ensure /var/tmp is a separate partition | warn_count"
      ansible.builtin.import_tasks:
        file: warning_facts.yml
  vars:
    warn_control_id: '1.1.4.1'
    required_mount: '/var/tmp'
  when:
    - required_mount not in mount_names
    - ubtu22cis_rule_1_1_4_1
  tags:
    - level2-server
    - level2-workstation
    - automated
    - audit
    - rule_1.1.4.1
    - var

- name: |
    "1.1.4.2 | PATCH | Ensure /var/tmp partition includes the noexec option"
    "1.1.4.3 | PATCH | Ensure /var/tmp partition includes the nosuid option"
    "1.1.4.4 | PATCH | Ensure /var/tmp partition includes the nodev option"
  ansible.posix.mount:
    path: /var/tmp
    src: "{{ item.device }}"
    state: present
    fstype: "{{ item.fstype }}"
    opts: defaults,{% if ubtu22cis_rule_1_1_4_2 %}noexec,{% endif %}{% if ubtu22cis_rule_1_1_4_3 %}nosuid,{% endif %}{% if ubtu22cis_rule_1_1_4_4 %}nodev{% endif %}
  notify: Remount var_tmp
  with_items: "{{ ansible_facts.mounts }}"
  loop_control:
    label: "{{ item.device }}"
  when:
    - item.mount == "/var/tmp"
    - ubtu22cis_rule_1_1_4_2 or
      ubtu22cis_rule_1_1_4_3 or
      ubtu22cis_rule_1_1_4_4
  tags:
    - level1-server
    - level1-workstation
    - automated
    - patch
    - rule_1.1.4.2
    - rule_1.1.4.3
    - rule_1.1.4.4
    - var

- name: "1.1.5.1 | AUDIT | Ensure /var/log is a separate partition"
  block:
    - name: "1.1.5.1 | AUDIT | Ensure /var/log is a separate partition | Absent"
      ansible.builtin.debug:
        msg: "Warning!! {{ required_mount }} doesn't exist. This is a manual task"

    - name: "1.1.5.1 | WARN | Ensure /var/log is a separate partition | warn_count"
      ansible.builtin.import_tasks:
        file: warning_facts.yml
  vars:
    warn_control_id: '1.1.5.1'
    required_mount: '/var/log'
  when:
    - required_mount not in mount_names
    - ubtu22cis_rule_1_1_5_1
  tags:
    - level2-server
    - level2-workstation
    - automated
    - audit
    - rule_1.1.5.1
    - varlog

- name: |
    "1.1.5.2 | PATCH | Ensure /var/log partition includes the nodev option"
    "1.1.5.3 | PATCH | Ensure /var/log partition includes the noexec option"
    "1.1.5.4 | PATCH | Ensure /var/log partition includes the nosuid option"
  ansible.posix.mount:
    path: /var/log
    src: "{{ item.device }}"
    state: present
    fstype: "{{ item.fstype }}"
    opts: defaults,{% if ubtu22cis_rule_1_1_5_2 %}nodev,{% endif %}{% if ubtu22cis_rule_1_1_5_3 %}noexec,{% endif %}{% if ubtu22cis_rule_1_1_5_4 %}nosuid{% endif %}
  notify: Remount var_log
  loop: "{{ ansible_facts.mounts }}"
  loop_control:
    label: "{{ item.device }}"
  when:
    - item.mount == "/var/log"
    - ubtu22cis_rule_1_1_5_2 or
      ubtu22cis_rule_1_1_5_3 or
      ubtu22cis_rule_1_1_5_4
  tags:
    - level1-server
    - level1-workstation
    - automated
    - patch
    - rule_1.1.5.2
    - rule_1.1.5.3
    - rule_1.1.5.4
    - varlog

