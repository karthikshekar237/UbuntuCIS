---
- name: "5.4.1 | PATCH | Ensure password creation requirements are configured"
  hosts: all
  become: true
  tasks:
    - name: "5.4.1 | PATCH | Ensure password creation requirements are configured | Install pam_pwquality module"
      apt:
        name: libpam-pwquality
        state: present
      when: ansible_facts['os_family'] == 'Debian'

    - name: "5.4.1 | PATCH | Ensure password creation requirements are configured | Add minlen"
      lineinfile:
        path: /etc/security/pwquality.conf
        regexp: '^minlen|^# minlen'
        line: minlen = 14

    - name: "5.4.1 | PATCH | Ensure password creation requirements are configured | Add minclass"
      lineinfile:
        path: /etc/security/pwquality.conf
        regexp: '^minclass'
        line: "minclass = {{ ubtu22cis_pwquality_minclass_value }}"
      when: ubtu22cis_pwquality_minclass | default(false)

    - name: "5.4.1 | PATCH | Ensure password creation requirements are configured | Add extended keys"
      lineinfile:
        path: /etc/security/pwquality.conf
        regexp: '^{{ item.key }}'
        line: "{{ item.key }} = {{ item.value }}"
      with_items: "{{ ubtu22cis_pwquality }}"
      when: not ubtu22cis_pwquality_minclass | default(false)

    - name: "5.4.1 | AUDIT | Ensure password creation requirements are configured | Confirm pwquality module in common-password"
      shell: grep 'password.*requisite.*pam_pwquality.so' /etc/pam.d/common-password
      register: ubtu22cis_5_4_1_pam_pwquality_state
      changed_when: false
      failed_when: false
      check_mode: false

    - name: "5.4.1 | PATCH | Ensure password creation requirements are configured | Set retry to 3 if pwquality exists"
      lineinfile:
        path: /etc/pam.d/common-password
        regexp: '^password.*requisite.*pam_pwquality.so'
        line: 'password        requisite      pam_pwquality.so retry=3'
      when: ubtu22cis_5_4_1_pam_pwquality_state.stdout | length > 0

    - name: "5.4.1 | PATCH | Ensure password creation requirements are configured | Set retry to 3 if pwquality does not exist"
      lineinfile:
        path: /etc/pam.d/common-password
        regexp: '^password.*requisite.*pam_permit.so'
        line: 'password        requisite      pam_pwquality.so retry=3'
        insertafter: '^password.*required.*pam_permit.so'
      when: ubtu22cis_5_4_1_pam_pwquality_state.stdout | length == 0

- name: "5.4.2 | AUDIT | Ensure lockout for failed password attempts is configured"
  hosts: all
  become: true
  tasks:
    - name: "5.4.2 | PATCH | Ensure lockout for failed password attempts is configured | Check pam faillock is set"
      shell: grep -E "preauth|authfail|authsucc" /etc/pam.d/common-auth | grep pam_faillock.so
      register: faillock_state
      changed_when: false
      failed_when: false

    - name: "5.4.2 | PATCH | Ensure lockout for failed password attempts is configured | Set faillock in common-auth"
      replace:
        path: /etc/pam.d/common-auth
        regexp: '.*pam_unix.so nullok'
        replace: 'auth required pam_faillock.so preauth silent audit deny=5 unlock_time=900 fail_interval=60'
      when: "'pam_faillock.so' not in faillock_state.stdout"

    - name: "5.4.2 | PATCH | Ensure lockout for failed password attempts is configured | Set faillock common-account"
      lineinfile:
        path: /etc/pam.d/common-account
        regexp: '^account\s+required\s+pam_faillock.so'
        line: 'account required              pam_faillock.so'

    - name: "5.4.2 | PATCH | Ensure lockout for failed password attempts is configured | Set pam_deny.so and pam_tally.so"
      lineinfile:
        path: /etc/security/faillock.conf
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        create: true
      with_items:
        - { regexp: '^deny', line: 'deny = 4' }
        - { regexp: '^fail_interval', line: 'fail_interval = 900' }
        - { regexp: '^unlock_time', line: 'unlock_time = 600' }

- name: "5.4.3 | PATCH | Ensure password reuse is limited"
  hosts: all
  become: true
  tasks:
    - name: "5.4.3 | PATCH | Ensure password reuse is limited | Add pam_unix or edit it accordingly"
      lineinfile:
        path: /etc/pam.d/common-password
        regexp: '^password\s+\[success=1\s+default=ignore\]\s+pam_unix.so'
        line: 'password        [success=1 default=ignore] pam_unix.so obscure use_authtok remember={{ ubtu22cis_pamd_pwhistory_remember }}'

- name: "5.4.4 | PATCH | Ensure password hashing algorithm is up to date with the latest standards"
  hosts: all
  become: true
  tasks:
    - name: "5.4.4 | AUDIT | Ensure password hashing algorithm is up to date with the latest standards | Confirm pam_unix.so"
      shell: grep -v ^# /etc/pam.d/common-password | grep -E "(yescrypt|md5|bigcrypt|sha256|sha512|blowfish)"
      register: ubtu22cis_5_4_4_pam_unix_state
      changed_when: false
      failed_when: false
      check_mode: false

    - name: "5.4.4 | PATCH | Ensure password hashing algorithm is up to date with the latest standards | Set hashing if pam_unix.so exists"
      lineinfile:
        path: /etc/pam.d/common-password
        regexp: '^password\s+\[success=1\s+default=ignore\]\s+pam_unix.so'
        line: 'password        [success=1 default=ignore] pam_unix.so obscure sha512'
      when: ubtu22cis_5_4_4_pam_unix_state.stdout | length > 0

    - name: "5.4.4 | PATCH | Ensure password hashing algorithm is up to date with the latest standards | Set hashing if pam_unix.so does not exist"
      lineinfile:
        path: /etc/login.defs
        regexp: '^ENCRYPT_METHOD'
        line: 'ENCRYPT_METHOD yescrypt'

- name: "5.4.5 | PATCH | Ensure password hashing algorithm is up to date with the latest standards"
  hosts: all
  become: true
  tasks:
    - name: "5.4.5 | AUDIT | Ensure all current passwords uses the configured hashing algorithm | capture hash"
      shell: awk -F':' '{print $1" "$2}' /etc/shadow | grep -Ev '(!|\*)'
      register: ubtu22cis_5_4_5_passwd_hash_used
      changed_when: false
      failed_when: false
      check_mode: false

    - name: "5.4.5 | AUDIT | Ensure all current passwords uses the configured hashing algorithm | check has found"
      debug:
        msg: "Warning!! Passwords found using not using {{ ubtu22cis_passwd_hash_algo }} algorithm - This required manual intervention"
      when: "' $y$' not in ubtu22cis_5_4_5_passwd_hash_used.stdout"

    - name: "5.4.5 | WARN | Ensure all current passwords uses the configured hashing algorithm | warn_count"
      import_tasks:
        file: warning_facts.yml
      when: "' $y$' not in ubtu22cis_5_4_5_passwd_hash_used.stdout"
